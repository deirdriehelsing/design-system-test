/**
 * !!! Do not edit this file directly !!!
 * This file was generated by @blueshift-ui/analytics
 * To edit these types, update the tracking plan in Segment and run the generate-event-types command again.
 *
 * @see https://github.com/varsitytutors/blueshift-ui/blob/master/packages/analytics/README.md#types-generation
 */

/* eslint-disable */

export interface ContentViewedEvent {
  /**
   * A readable name for the component that is being viewed.
   */
  content_name: string;
  /**
   * A flexible key-value store for additional properties or future extensions.
   */
  metadata?: any;
  /**
   * URL path where the component was viewed.
   */
  page_path?: string;
  /**
   * Logical section of the page where the click happened.
   */
  page_section?: string;
  [property: string]: any;
}

/**
 * Tracks user clicks on buttons, links, and other interactive elements.
 */
export interface ElementClickedEvent {
  /**
   * Unique identifier for the element.
   */
  element_id: string;
  /**
   * Visible text on the element.
   */
  element_text?: string;
  /**
   * Type of element clicked (e.g., button, link, icon).
   */
  element_type: string;
  /**
   * A flexible key-value store for additional properties or future extensions.
   */
  metadata?: any;
  /**
   * URL path where the click occurred.
   */
  page_path: string;
  /**
   * Logical section of the page where the click happened.
   */
  page_section?: string;
  [property: string]: any;
}

/**
 * Tracks when an element (such as accordion, dialog, drawer) is closed.
 */
export interface ElementClosedEvent {
  /**
   * Unique identifier for the element.
   */
  element_id: string;
  /**
   * The type of the element being tracked (accordion, dialog, drawer).
   */
  element_type: ElementType;
  /**
   * A flexible key-value store for additional properties or future extensions.
   */
  metadata?: any;
  /**
   * URL path where the event occurred.
   */
  page_path: string;
  /**
   * Logical section of the page where the event happened.
   */
  page_section?: string;
  [property: string]: any;
}

/**
 * The type of the element being tracked (accordion, dialog, drawer).
 */
export type ElementType = 'accordion' | 'dialog' | 'drawer' | 'menu';

/**
 * Tracks hover interactions on tooltips, menus, and interactive elements.
 */
export interface ElementHoveredEvent {
  /**
   * Unique identifier for the element.
   */
  element_id: string;
  /**
   * Visible text on the element.
   */
  element_text?: string;
  /**
   * Type of element hovered (e.g., button, link, icon).
   */
  element_type: string;
  /**
   * A flexible key-value store for additional properties or future extensions.
   */
  metadata?: any;
  /**
   * URL path where the event occurred.
   */
  page_path: string;
  /**
   * Logical section of the page where the hover happened.
   */
  page_section?: string;
  [property: string]: any;
}

/**
 * Tracks when an element (such as accordion, dialog, drawer) is opened.
 */
export interface ElementOpenedEvent {
  /**
   * Unique identifier for the element.
   */
  element_id: string;
  /**
   * The type of the element being tracked (accordion, dialog, drawer).
   */
  element_type: ElementType;
  /**
   * A flexible key-value store for additional properties or future extensions.
   */
  metadata?: any;
  /**
   * URL path where the event occurred.
   */
  page_path: string;
  /**
   * Logical section of the page where the event happened.
   */
  page_section?: string;
  [property: string]: any;
}

/**
 * Tracks user-facing errors that impact their journey within our system. It helps identify
 * friction points in the user experience and improve system stability.
 */
export interface ErrorLoggedEvent {
  /**
   * A broad grouping of error types (e.g., payment, authentication, api_failure).
   */
  error_category: string;
  /**
   * A brief description of the error.
   */
  error_message: string;
  /**
   * Severity level of the error (critical, warning, info).
   */
  error_severity?: string;
  /**
   * A flexible key-value store for additional properties or future extensions.
   */
  metadata?: any;
  /**
   * The URL path where the error occurred.
   */
  page_path?: string;
  /**
   * The logical section of the page where the error happened.
   */
  page_section?: string;
  /**
   * How the error affects the user (blocking, frustrating, minor).
   */
  user_impact?: string;
  [property: string]: any;
}

/**
 * Tracks feature flag evaluations
 */
export interface FeatureFlagEvaluatedEvent {
  /**
   * A further description of the error condition, if the evaluation_reason is 'ERROR'.
   */
  evaluation_error_detail?: string;
  /**
   * The key of the failed prerequisite flag, if the evaluation_reason is
   * 'PREREQUISITE_FAILED'.
   */
  evaluation_prerequisite_key?: string;
  /**
   * The general category of the evaluation reason.
   * Possible reasons:
   * 'OFF' â€“ The flag was off and therefore returned its configured off value.
   * 'FALLTHROUGH' - The flag was on but the context did not match any targets or rules.
   * 'TARGET_MATCH' - The context key was specifically targeted for this flag.
   * 'RULE_MATCH' - The context matched one of the flag's rules.
   * 'PREREQUISITE_FAILED' - The flag was considered off because it had at least one
   * prerequisite flag that either was off or did not return the desired variation.
   * 'ERROR' - The flag could not be evaluated, e.g. because it does not exist or due to an
   * unexpected error.
   */
  evaluation_reason?: string;
  /**
   * The unique identifier of the matched rule, if the evaluation_reason is 'RULE_MATCH'.
   */
  evaluation_rule_id?: string;
  /**
   * The unique key of the feature flag
   */
  flag_name: string;
  /**
   * The result of the flag evaluation. This will be either one of the flag's variations or
   * the default value.
   */
  flag_value: any;
  /**
   * The index of the returned value within the flag's list of variations, e.g. 0 for the
   * first variation-- or null if the default value was returned.
   */
  flag_variation_index?: number | null;
  /**
   * Whether the evaluation was part of an experiment. This is 'true' if the evaluation
   * resulted in an experiment rollout and served one of the variations in the experiment.
   * Otherwise it is 'false' or 'undefined'.
   */
  in_experiment?: boolean;
  [property: string]: any;
}

/**
 * Tracks when users interact with input fields, dropdowns, checkboxes, or other form
 * elements.
 */
export interface UserEnteredInputEvent {
  /**
   * Unique identifier for the input field.
   */
  element_id: string;
  /**
   * Type of input (e.g., text, password, select, checkbox).
   */
  element_type: string;
  /**
   * Action performed (focus, change, blur).
   */
  input_action?: string;
  /**
   * State of the input (empty, filled, autofilled).
   */
  input_state?: string;
  /**
   * Specifies the input type (text, email, number, etc.).
   */
  input_type?: string;
  /**
   * Stores the selected value(s) for dropdowns, radio buttons, checkboxes, and multi-select
   * inputs. Must use predefined enum values. Do not store free-text user input.
   */
  input_value?: any;
  /**
   * true if input is masked (e.g., passwords, credit card numbers).
   */
  is_input_masked?: boolean;
  /**
   * A flexible key-value store for additional properties or future extensions.
   */
  metadata?: any;
  /**
   * URL path where the interaction happened.
   */
  page_path: string;
  /**
   * Logical section of the page.
   */
  page_section?: string;
  [property: string]: any;
}
