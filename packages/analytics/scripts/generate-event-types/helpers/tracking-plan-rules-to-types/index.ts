import { FetchingJSONSchemaStore, InputData, JSONSchemaInput, quicktype } from 'quicktype-core';
import { RuleV1 as TrackingPlanRule } from '@segment/public-api-sdk-typescript';
import prettier from 'prettier';
import toCamelCase from 'lodash/camelCase';
import toStartCase from 'lodash/startCase';

const OUTPUT_FILE_HEADER = `/**
 * !!! Do not edit this file directly !!!
 * This file was generated by @blueshift-ui/analytics
 * To edit these types, update the tracking plan in Segment and run the generate-event-types command again.
 *
 * @see https://varsity.atlassian.net/wiki/spaces/ENG/pages/1233879147/Generating+Event+Types
 */

/* eslint-disable */

`;

/**
 * Convert tracking plan rules to types definitions
 * @param trackingPlanRules - The rules from the tracking plan
 * @returns A string containing the types definitions from the tracking plan rules
 */
async function trackingPlanRulesToTypes(trackingPlanRules: TrackingPlanRule[]) {
  const jsonSchemaInput = new JSONSchemaInput(new FetchingJSONSchemaStore());

  const trackingPlanTrackRules = trackingPlanRules.filter(
    (rule) => rule.type === TrackingPlanRule.TypeEnum.TRACK
  );

  await Promise.all(
    trackingPlanTrackRules.map((rule) => {
      if (!rule.key) {
        throw new Error(`Missing tracking plan rule key`);
      }

      const eventName = `${toStartCase(toCamelCase(rule.key.trim().replace(/event$/i, '')))}Event`;

      return jsonSchemaInput.addSource({
        name: eventName,
        schema: JSON.stringify(rule.jsonSchema),
      });
    })
  );

  const inputData = new InputData();
  inputData.addInput(jsonSchemaInput);

  const { lines } = await quicktype({
    inputData,
    lang: 'typescript',
    rendererOptions: {
      'just-types': true,
      'prefer-unions': true,
    },
  });

  return prettier.format(`${OUTPUT_FILE_HEADER}${lines.join('\n')}`, {
    parser: 'typescript',
    printWidth: 100,
    singleQuote: true,
    trailingComma: 'es5',
  });
}

export default trackingPlanRulesToTypes;
